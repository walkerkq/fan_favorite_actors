word.total <- df$Total[y]
not.word.total <- grand.total - word.total
expected.speaker <- speaker.total*(word.total / not.word.total)
expected.other <- other.total*(word.total / not.word.total)
observed.speaker <- df$Speaker[y]
observed.other <- df$Other[y]
chisq.other <- ((observed.other - expected.other)^2) / expected.other
chisq.speaker <- ((observed.speaker - expected.speaker)^2) / expected.speaker
chisq <- chisq.other + chisq.speaker
ll.other <- observed.other * log(observed.other/expected.other)
ll.speaker <- observed.speaker * log(observed.speaker/expected.speaker)
ll <- 2 * ll.other * ll.speaker
row <- data.frame(word.total, not.word.total, expected.speaker, expected.other,
observed.speaker, observed.other, chisq.other, chisq.speaker,
chisq, ll.other, ll.speaker, ll)
results <- rbind(results, row)
return(results)
}
}
df2 <- compare(df)
seq_along(df[,1])
df2
compare <- function(df) {
for(y in seq_along(df[,1])){
results <- NULL
word.total <- df$Total[y]
not.word.total <- grand.total - word.total
expected.speaker <- speaker.total*(word.total / not.word.total)
expected.other <- other.total*(word.total / not.word.total)
observed.speaker <- df$Speaker[y]
observed.other <- df$Other[y]
chisq.other <- ((observed.other - expected.other)^2) / expected.other
chisq.speaker <- ((observed.speaker - expected.speaker)^2) / expected.speaker
chisq <- chisq.other + chisq.speaker
ll.other <- observed.other * log(observed.other/expected.other)
ll.speaker <- observed.speaker * log(observed.speaker/expected.speaker)
ll <- 2 * ll.other * ll.speaker
row <- data.frame(word.total, not.word.total, expected.speaker, expected.other,
observed.speaker, observed.other, chisq.other, chisq.speaker,
chisq, ll.other, ll.speaker, ll)
results <- rbind(results, row)
}
return(results)
}
df2 <- compare(df)
compare <- function(df) {
results <- NULL
for(y in seq_along(df[,1])){
word.total <- df$Total[y]
not.word.total <- grand.total - word.total
expected.speaker <- speaker.total*(word.total / not.word.total)
expected.other <- other.total*(word.total / not.word.total)
observed.speaker <- df$Speaker[y]
observed.other <- df$Other[y]
chisq.other <- ((observed.other - expected.other)^2) / expected.other
chisq.speaker <- ((observed.speaker - expected.speaker)^2) / expected.speaker
chisq <- chisq.other + chisq.speaker
ll.other <- observed.other * log(observed.other/expected.other)
ll.speaker <- observed.speaker * log(observed.speaker/expected.speaker)
ll <- 2 * ll.other * ll.speaker
row <- data.frame(word.total, not.word.total, expected.speaker, expected.other,
observed.speaker, observed.other, chisq.other, chisq.speaker,
chisq, ll.other, ll.speaker, ll)
results <- rbind(results, row)
}
return(results)
}
df2 <- compare(df)
View(results)
View(df2)
compare <- function(df) {
results <- NULL
for(y in seq_along(df[,1])){
word.total <- df$Total[y]
not.word.total <- grand.total - word.total
expected.speaker <- speaker.total*(word.total / not.word.total)
expected.other <- other.total*(word.total / not.word.total)
observed.speaker <- df$Speaker[y]
observed.other <- df$Other[y]
chisq.other <- ((observed.other - expected.other)^2) / expected.other
chisq.speaker <- ((observed.speaker - expected.speaker)^2) / expected.speaker
chisq <- round((chisq.other + chisq.speaker), 2)
ll.other <- observed.other * log(observed.other/expected.other)
ll.speaker <- observed.speaker * log(observed.speaker/expected.speaker)
ll <- round((2 * ll.other * ll.speaker), 2)
row <- data.frame(word.total, not.word.total, expected.speaker, expected.other,
observed.speaker, observed.other, chisq.other, chisq.speaker,
chisq, ll.other, ll.speaker, ll)
results <- rbind(results, row)
}
return(results)
}
df2 <- compare(df)
observed.speaker/expected.speaker
?samlpe
h <- data.frame(num=c(0:1000))
h$log <- log(h[,1])
head(h)
log(.001)
log(.01)
log(.1)
log(1)
head(df2)
summary(df2$ll)
df2 <- df2[order(df2$ll),]
df2 <- df2[order(-df2$ll),]
head(df2)
View(df2)
library(ggplot2)
ggplot(df2, aes(chisq, ll)) + geom_point()
View(df2)
ggplot(df2, aes(chisq, ll)) + geom_point(aes(size=observed.speaker))
install.packages("twitteR")
library(RCurl)
library(XML)
library(tm)
library(RWeka)
library(qdap)
URL <- "http://www.azlyrics.com/p/prince.html"
links <- htmlTreeParse(URL, useInternal=TRUE)
link_text <- xpathSApply(links, "//div[@id='listAlbum']//a", xmlGetAttr, "href")
link_text <- gsub("\\.{2}", "http://www.azlyrics.com", link_text)
link_desc <- xpathSApply(links, "//div[@id='listAlbum']//a", xmlValue)
album_desc <- xpathSApply(links, "//div[@class='album']", xmlValue)
album_desc <- gsub('album: |soundtrack: |compilation: \"|\"', '', album_desc)
reps <- c(9, 9, 8, 8, 11, 9, # purple rain
9, 11, 16, 9, 9, 17, # graffiti bridge
13, 18, 8, 10, 18, 11, # chaos and disorder
35, 30, 12, 16, 10, 14, # the rainbow children
9, 12, 12, 10, 10, 9, # Mplsound
10, 13, 10, 11, 12, 6)
album_list <- NULL
count <- 0
for(rep in reps){
count <- count+1
list <- rep(album_desc[count], rep)
album_list <- c(album_list, list)
}
link_df <- data.frame(URL=link_text, Song.Title=link_desc)
link_df <- link_df[grepl("http://www.azlyrics.com/lyrics/", link_df$URL), ]
link_df$Album <- 0
link_df$Year <- 0
for(x in seq_along(link_df$URL)){
link_df$Album[x] <- strsplit(album_list[x], '\\(')[[1]][1]
link_df$Year[x] <- gsub('\\)', "", strsplit(album_list[x], '\\(')[[1]][2])
}
all_lyrics <- NULL
for(h in 150:444){
URL2 <- link_df$URL[h]
lyric_html <- htmlTreeParse(URL2, useInternal=TRUE)
lyric_text <- xpathSApply(lyric_html, "//div", xmlValue)
lyrics <- lyric_text[23]
lyrics <- tolower(gsub("\n|\r|\t|\\(|\\)|\\]|\\[", " ", lyrics))
row <- data.frame(Song.Title=link_df$Song.Title[h], Year=link_df$Year[h], Album=link_df$Album[h], Lyrics=lyrics)
all_lyrics <- rbind(all_lyrics, row)
}
tail(all_lyrics)
View(link_df)
150+136
write.csv(all_lyrics, "prince_151-329.csv", row.names=FALSE)
library(RCurl)
library(XML)
library(tm)
library(RWeka)
library(qdap)
URL <- "http://www.azlyrics.com/p/prince.html"
links <- htmlTreeParse(URL, useInternal=TRUE)
link_text <- xpathSApply(links, "//div[@id='listAlbum']//a", xmlGetAttr, "href")
link_text <- gsub("\\.{2}", "http://www.azlyrics.com", link_text)
link_desc <- xpathSApply(links, "//div[@id='listAlbum']//a", xmlValue)
album_desc <- xpathSApply(links, "//div[@class='album']", xmlValue)
album_desc <- gsub('album: |soundtrack: |compilation: \"|\"', '', album_desc)
reps <- c(9, 9, 8, 8, 11, 9, # purple rain
9, 11, 16, 9, 9, 17, # graffiti bridge
13, 18, 8, 10, 18, 11, # chaos and disorder
35, 30, 12, 16, 10, 14, # the rainbow children
9, 12, 12, 10, 10, 9, # Mplsound
10, 13, 10, 11, 12, 6)
album_list <- NULL
count <- 0
for(rep in reps){
count <- count+1
list <- rep(album_desc[count], rep)
album_list <- c(album_list, list)
}
link_df <- data.frame(URL=link_text, Song.Title=link_desc)
link_df <- link_df[grepl("http://www.azlyrics.com/lyrics/", link_df$URL), ]
link_df$Album <- 0
link_df$Year <- 0
for(x in seq_along(link_df$URL)){
link_df$Album[x] <- strsplit(album_list[x], '\\(')[[1]][1]
link_df$Year[x] <- gsub('\\)', "", strsplit(album_list[x], '\\(')[[1]][2])
}
all_lyrics <- NULL
#for(h in seq_along(link_df$URL)){
for(h in 150:444){
URL2 <- link_df$URL[h]
lyric_html <- htmlTreeParse(URL2, useInternal=TRUE)
lyric_text <- xpathSApply(lyric_html, "//div", xmlValue)
lyrics <- lyric_text[23]
lyrics <- tolower(gsub("\n|\r|\t|\\(|\\)|\\]|\\[", " ", lyrics))
row <- data.frame(Song.Title=link_df$Song.Title[h], Year=link_df$Year[h], Album=link_df$Album[h], Lyrics=lyrics)
all_lyrics <- rbind(all_lyrics, row)
}
# Got 150 Requests before it timed out
all_lyrics$ID <- 1:length(all_lyrics$Song.Title)
tail(all_lyrics)
View(link_df)
write.csv(all_lyrics, "prince_151-402.csv", row.names=FALSE)
head(all_lyrics)
pol <- polarity(all_lyrics$Lyric)$all
pol2 <- cbind(pol[,c(2,3)], all_lyrics[,c(1:3,5)])
pol2 <- pol2[order(-pol2$polarity), ]
pol_plot <- aggregate(polarity ~ Album + Year, pol2, mean)
ggplot(pol_plot, aes(Year, polarity)) + geom_point()
library(ggplot2)
ggplot(pol_plot, aes(Year, polarity)) + geom_point()
View(pol_plot)
View(pol)
names(all_lyrics)
all_lyrics[,c(1:3)]
library(RCurl)
library(XML)
library(stringr)
################### SCRAPE SONG NAMES ###################
#### source: wikipedia.org
allthesongs <- data.frame()
for (i in 1965:2015) {
# create the URL for each year
URL <- paste("http://en.wikipedia.org/wiki/Billboard_Year-End_Hot_100_singles_of_",i,sep="")
# parse the HTML
results <- htmlTreeParse(getURL(URL, followlocation=TRUE), useInternal=TRUE)
billboard_text <- xpathSApply(results, "//table[@class='wikitable sortable']//tr",xmlValue)
split_billboard_text <- str_split_fixed(billboard_text,"\n",3)
billboard <- as.data.frame(cbind(split_billboard_text[2:101, ], rep(i,100)), stringsAsFactors=FALSE)
# row bind this year's data to all the data
allthesongs <- rbind(allthesongs, billboard)
}
colnames(allthesongs) <- c("Rank", "Song", "Artist", "Year")
allthesongs$Song <- gsub('\\"', "", allthesongs$Song)
allthesongs$Song <- tolower(gsub("[^[:alnum:] ]", "", allthesongs$Song))
allthesongs$Artist <- tolower(gsub("[^[:alnum:] ]", "", allthesongs$Artist))
allthesongs$Lyrics <- ""
allthesongs$Source <- ""
################### SCRAPE THE LYRICS ###################
### source: multiple. metorlyics.com, songlyrics.com
#for (s in 1:length(allthesongs$Song))  {
for (s in 1001:2000)  {
lyrics <- "Not set yet."
results <- 12 # arbitrary number
# clean up the artist field to fit in the URL
artist <- strsplit(allthesongs$Artist[s], " featuring | feat | feat. | with | duet | and ")
artist <- unlist(artist)[[1]]
artist2 <- gsub("The ", "", artist)
# make URLs
metroURL <- paste("http://metrolyrics.com/",allthesongs$Song[s],"-lyrics-",artist2,".html",sep="")
metronotheURL <- paste("http://metrolyrics.com/",allthesongs$Song[s],"-lyrics-",artist,".html",sep="")
songURL <- paste("http://songlyrics.com/",artist2,"/",allthesongs$Song[s],"-lyrics",sep="")
songnotheURL <- paste("http://songlyrics.com/",artist,"/",allthesongs$Song[s],"-lyrics",sep="")
URLs <- c(metroURL, metronotheURL, songURL, songnotheURL)
lyriclocs <- c("//div[@id='lyrics-body-text']",
"//div[@id='lyrics-body-text']",
"//p[@id='songLyricsDiv']",
"//p[@id='songLyricsDiv']")
for (b in 1:length(URLs)) {
allthesongs$Lyrics[s] <- "Not set yet."
results <- 12 # arbitrary number
URL <- tolower(gsub(" ", "-", URLs[b]))
tryCatch({
results <- htmlTreeParse(URL, useInternal=TRUE, isURL=TRUE)
lyrics <- xpathSApply(results, lyriclocs[b], xmlValue) },
error = function(x) {
message(paste(s, "failed")) },
finally={
if (!is.numeric(results)) {
if (length(lyrics)!=0) {
allthesongs$Lyrics[s] <- lyrics[[1]]
message(paste(s, "success"))
allthesongs$Source[s] <- b
break
}
}
}) # end tryCatch
} # end URL for
} # end for
write.csv(allthesongs, "sofar2.csv", row.names=FALSE)
x<- allthesongs[is.na(allthesongs$Lyrics,)]
x<- allthesongs[is.na(allthesongs$Lyrics),]
x<- allthesongs[allthesongs$Lyrics=="",]
x<- allthesongs[allthesongs$Lyrics=="Not set yet.",]
alldeps <- read.csv("/Users/kaylinwalker/Desktop/alldeps.csv", stringsAsFactors=FALSE)
keeps <- read.csv("/Users/kaylinwalker/Desktop/keeps.csv", stringsAsFactors=FALSE)
save <- alldeps[alldeps$CombinedName %in% keeps$Combo, ]
View(save)
length(unique(save$CombinedName))
write.csv(SAVE, "w4334_deposits.csv", row.names=FALSE)
write.csv(save, "w4334_deposits.csv", row.names=FALSE)
library(XML)
library (RCurl)
library(stringr)
library(ggplot2)
# get list of movies (imdb numbers) from a list
#imdbURL <- "http://www.imdb.com/list/ls070000079/"
imdbURL <- "http://www.imdb.com/chart/top/?ref_=nv_mv_250_6"
imdb <- htmlTreeParse(getURL(imdbURL), useInternal=TRUE)
#imdbText <- xpathApply(imdb, "//div[@class='info']//b//a", xmlGetAttr, "href")
imdbText <- xpathApply(imdb, "//td[@class='titleColumn']//a", xmlGetAttr, "href")
movieList <- unlist(imdbText)
#movieList <- gsub("/title/", "", movieList)
movieList <- substring(movieList, 8, 16)
#movieList <- gsub("/", "", movieList)
URL1 <- "http://www.omdbapi.com/?i="
URL2 <- "&y=&plot=short&r=xml&type=movie&tomatoes=true"
movieDetails <- data.frame()
for(movie in movieList){
movie <- gsub(" ", "+", movie)
URL <- paste(URL1, movie, URL2, sep="")
xml <- xmlParse(getURL(URL))
# loop through each attribute and save it to a data frame
keeps <- c("title", "year", "rated", "released", "genre", "runtime", "imdbID", "metascore", "imdbRating",
"imdbVotes", "tomatoMeter", "tomatoRating", "tomatoReviews", "tomatoFresh",
"tomatoRotten", "tomatoUserMeter", "tomatoUserRating", "tomatoUserReviews")
details <- NULL
row <- NULL
for(x in keeps){
item <- xpathSApply(xml, "//movie", xmlGetAttr, x)
row <- c(row, item)
}
details <- rbind(details, row)
colnames(details) <- keeps
movieDetails <- rbind(movieDetails, details)
}
for(g in c(2,8:18)) movieDetails[,g] <- as.numeric(as.character(gsub(",", "", movieDetails[,g])))
movieDetails$Rank <- 1:250
movieDetails$tomatoMeterDiff <- movieDetails$tomatoMeter - movieDetails$tomatoUserMeter
movieDetails <- movieDetails[order(movieDetails$tomatoMeterDiff), ]
movieDetails$title <- factor(movieDetails$title , levels=movieDetails$title)
View(movieDetails)
for(g in c(2,8:18)) movieDetails[,g] <- as.numeric(as.character(gsub(",", "", movieDetails[,g])))
movieDetails$Rank <- 1:250
movieDetails$tomatoMeterDiff <- movieDetails$tomatoMeter - movieDetails$tomatoUserMeter
movieDetails <- movieDetails[order(movieDetails$tomatoMeterDiff), ]
movieDetails$title <- factor(movieDetails$title , levels=movieDetails$title)
ggplot(movieDetails, aes(year, tomatoMeterDiff)) + geom_point(aes(color=Rank), size=3)
imdbURL <- "http://www.imdb.com/list/ls009120901/?start=751&view=compact&sort=listorian:asc"
imdb <- htmlTreeParse(getURL(imdbURL), useInternal=TRUE)
movieList <- NULL
for(start in c(751, 1001, 1251)){
imdbURL <- paste("http://www.imdb.com/list/ls009120901/?start=", start, "&view=compact&sort=listorian:asc", sep="")
imdb <- htmlTreeParse(getURL(imdbURL), useInternal=TRUE)
imdbText <- xpathApply(imdb, "//td[@class='title']//a", xmlGetAttr, "href")
movieList2 <- unlist(imdbText1)
movieList <-rbind(movieList, movieList2)
}
movieList <- NULL
for(start in c(751, 1001, 1251)){
imdbURL <- paste("http://www.imdb.com/list/ls009120901/?start=", start, "&view=compact&sort=listorian:asc", sep="")
imdb <- htmlTreeParse(getURL(imdbURL), useInternal=TRUE)
imdbText <- xpathApply(imdb, "//td[@class='title']//a", xmlGetAttr, "href")
movieList2 <- unlist(imdbText)
movieList <-rbind(movieList, movieList2)
}
movieList <- NULL
for(start in c(751, 1001, 1251)){
imdbURL <- paste("http://www.imdb.com/list/ls009120901/?start=", start, "&view=compact&sort=listorian:asc", sep="")
imdb <- htmlTreeParse(getURL(imdbURL), useInternal=TRUE)
imdbText <- xpathApply(imdb, "//td[@class='title']//a", xmlGetAttr, "href")
movieList2 <- unlist(imdbText)
movieList <-c(movieList, movieList2)
}
movieList <- NULL
for(start in c(751, 1001, 1251)){
imdbURL <- paste("http://www.imdb.com/list/ls009120901/?start=", start, "&view=compact&sort=listorian:asc", sep="")
imdb <- htmlTreeParse(getURL(imdbURL), useInternal=TRUE)
imdbText <- xpathApply(imdb, "//td[@class='title']//a", xmlGetAttr, "href")
movieList <-c(movieList, unlist(imdbText))
}
movieList <- substring(movieList, 8, 16)
# get movie info via imdb id
URL1 <- "http://www.omdbapi.com/?i="
URL2 <- "&y=&plot=short&r=xml&type=movie&tomatoes=true"
movieDetails <- data.frame()
for(movie in movieList){
movie <- gsub(" ", "+", movie)
URL <- paste(URL1, movie, URL2, sep="")
xml <- xmlParse(getURL(URL))
# loop through each attribute and save it to a data frame
keeps <- c("title", "year", "rated", "released", "genre", "runtime", "imdbID", "metascore", "imdbRating",
"imdbVotes", "tomatoMeter", "tomatoRating", "tomatoReviews", "tomatoFresh",
"tomatoRotten", "tomatoUserMeter", "tomatoUserRating", "tomatoUserReviews")
details <- NULL
row <- NULL
for(x in keeps){
item <- xpathSApply(xml, "//movie", xmlGetAttr, x)
row <- c(row, item)
}
details <- rbind(details, row)
colnames(details) <- keeps
movieDetails <- rbind(movieDetails, details)
}
for(g in c(2,8:18)) movieDetails[,g] <- as.numeric(as.character(gsub(",", "", movieDetails[,g])))
tail(movieDetails)
movieDetails$tomatoMeterDiff <- movieDetails$tomatoMeter - movieDetails$tomatoUserMeter
movieDetails <- movieDetails[order(movieDetails$tomatoMeterDiff), ]
movieDetails$title <- factor(movieDetails$title , levels=movieDetails$title)
ggplot(movieDetails, aes(year, tomatoMeterDiff)) + geom_point(aes(color=Rank), size=3)
ggplot(movieDetails, aes(year, tomatoMeterDiff)) + geom_point()
ggplot(movieDetails, aes(title, tomatoMeterDiff)) + geom_bar(stat="identity")
ggplot(movieDetails, aes(metascore, tomatoUserMeter)) + geom_point() + geom_text(aes(label=title), color="#666666", size=3) + ylim(c(0,100)) + xlim(c(0,100)) + annotate("segment", x=0, y=0, xend=100, yend=100)
ggplot(movieDetails, aes(tomatoMeter, tomatoUserMeter)) + geom_point() + geom_text(aes(label=title), color="#666666", size=3) + ylim(c(0,100)) + xlim(c(0,100)) + annotate("segment", x=0, y=0, xend=100, yend=100)
View(movieDetails)
table(movieDetails$genre)
genres <- unique(str_c(movieDetails$genre, collapse=" "))
genres
genres <- unique(unlist(strsplit(movieDetails$genre, ","))
)
?strsplit
genres <- unique(strsplit(unlist(movieDetails$genre, ",")))
genres <- unique(strsplit(unlist(movieDetails$genre, split=",")))
genres <- unique(strsplit(unlist(movieDetails$genre, split="\\,")))
genres <- unique(strsplit(unlist(movieDetails$genre), split="\\,"))
genres <- unique(strsplit(unlist(movieDetails$genre), split="\,"))
genres <- unique(strsplit(unlist(movieDetails$genre), split=","))
unlist(movieDetails$genre)
genres <- strsplit(unlist(movieDetails$genre), split=",")
genres <- unique(strsplit(unlist(as.character(movieDetails$genre)), split=","))
genres
unlist(as.character(movieDetails$genre))
genres <- unique(unlist(strsplit(unlist(as.character(movieDetails$genre)), split=",")))
geners
genres
genres <- unique(unlist(strsplit(unlist(as.character(movieDetails$genre)), split=", ")))
genres
View(movieDetails)
movieDetails$primary.genre <- strspit(as.character(movieDetails$genre, ", "))[[1]]
movieDetails$primary.genre <- strsplit(as.character(movieDetails$genre, ", "))[[1]]
movieDetails$primary.genre <- strsplit(as.character(movieDetails$genre), split=", ")[[1]]
movieDetails$primary.genre <- sapply(movieDetails$genre, function (x) strsplit(as.character(x), split=", ")[[1]])
View(movieDetails)
movieDetails$primary.genre <- sapply(movieDetails$genre, function (x) strsplit(as.character(x), split=", ")[[1]][1])
View(movieDetails)
ggplot(movieDetails, aes(tomatoMeter, tomatoUserMeter)) + geom_point() + geom_text(aes(label=title, color=primary.genre), size=3) + ylim(c(0,100)) + xlim(c(0,100)) + annotate("segment", x=0, y=0, xend=100, yend=100)
ggplot(movieDetails, aes(primary.genre, tomatoMeterDiff)) + geom_boxlot()
ggplot(movieDetails, aes(primary.genre, tomatoMeterDiff)) + geom_boxplot()
table(movieDetails$primary.genre)
ggplot(movieDetails[movieDetails$primary.genre %in% c("Action", "Comedy", "Drama", "Adventure", "Biography"), ], aes(primary.genre, tomatoMeterDiff)) + geom_boxplot()
test <- movieDetails[movieDetails$primary.genre %in% c("Action", "Comedy", "Drama", "Adventure", "Biography"), ]
fit <- aov(tomatoMeterDiff ~ genre, data=test)
summary(fit)
fit <- aov(tomatoMeterDiff ~ primary.genre, data=test)
summary(fit)
fit <- aov(tomatoMeterDiff ~ rated, data=movieDetails)
summary(fit)
ggplot(movieDetails, aes(rated, tomatoMeterDiff)) + geom_boxplot()
table(movieDetails$rated)
ggplot(movieDetails[movieDetails$rated %in% c("R", "PG", "PG-13"), ], aes(rated, tomatoMeterDiff)) + geom_boxplot()
fit <- aov(tomatoMeterDiff ~ rated, data=movieDetails[movieDetails$rated %in% c("R", "PG", "PG-13"), ])
summary(fit)
plot(fit)
ggplot(movieDetails[movieDetails$rated %in% c("R", "PG", "PG-13"), ], aes(rated, tomatoMeterDiff)) + geom_boxplot()
hist(movieDetails$tomatoReviews)
summary(movieDetails)
movieDetails <- movieDetails[movieDetails$tomatoUserReviews >= 25000 & movieDetails$imdbVotes >= 25000 & movieDetails$tomatoReviews >= 20, ]
summary(movieDetails)
movieDetails <- movieDetails[movieDetails$tomatoUserReviews >= 25000 & movieDetails$imdbVotes >= 25000 & movieDetails$tomatoReviews >= 30, ]
View(movieDetails)
movieDetails <- movieDetails[complete.cases(movieDetails), ]
View(movieDetails)
movieDetails <- movieDetails[!is.na(movieDetails), ]
View(movieDetails)
movieDetails <- data.frame()
for(movie in movieList){
movie <- gsub(" ", "+", movie)
URL <- paste(URL1, movie, URL2, sep="")
xml <- xmlParse(getURL(URL))
# loop through each attribute and save it to a data frame
keeps <- c("title", "year", "rated", "released", "genre", "runtime", "imdbID", "metascore", "imdbRating",
"imdbVotes", "tomatoMeter", "tomatoRating", "tomatoReviews", "tomatoFresh",
"tomatoRotten", "tomatoUserMeter", "tomatoUserRating", "tomatoUserReviews")
details <- NULL
row <- NULL
for(x in keeps){
item <- xpathSApply(xml, "//movie", xmlGetAttr, x)
row <- c(row, item)
}
details <- rbind(details, row)
colnames(details) <- keeps
movieDetails <- rbind(movieDetails, details)
}
for(g in c(2,8:18)) movieDetails[,g] <- as.numeric(as.character(gsub(",", "", movieDetails[,g])))
# set initial thresholds
# tomatoUserReviews: 25000
# imdbVotes: 25000
# tomatoReviews: 30
movieDetails <- movieDetails[movieDetails$tomatoUserReviews >= 25000 & movieDetails$imdbVotes >= 25000 & movieDetails$tomatoReviews >= 30, ]
movieDetails <- movieDetails[!is.na(movieDetails$tomatoMeter), ]
movieDetails$tomatoMeterDiff <- movieDetails$tomatoMeter - movieDetails$tomatoUserMeter
genres <- unique(unlist(strsplit(unlist(as.character(movieDetails$genre)), split=", ")))
movieDetails$primary.genre <- sapply(movieDetails$genre, function (x) strsplit(as.character(x), split=", ")[[1]][1])
ggplot(movieDetails[movieDetails$rated %in% c("R", "PG", "PG-13"), ], aes(rated, tomatoMeterDiff)) + geom_boxplot()
test <- movieDetails[movieDetails$primary.genre %in% c("Action", "Comedy", "Drama", "Adventure", "Biography"), ]
fit <- aov(tomatoMeterDiff ~ rated, data=movieDetails[movieDetails$rated %in% c("R", "PG", "PG-13"), ])
summary(fit)
fit <- aov(tomatoMeterDiff ~ primary.genre, data=test)
summary(fit)
ggplot(test, aes(primary.genre, tomatoMeterDiff)) + geom_boxplot()
source('~/R/fan_favorite_actors/movies_plot.R', echo=TRUE)
actor_plot("Helena Bonham Carter")
actor_plot("Daniel Day-Lewis")
actor_plot("Scarlett Johansson")
actor_plot("Willem Dafoe")
actor_plot("Jeff Bridges")
