status <- data.frame(table(sub$Active.Application.Record..Application.Term, sub$Admission.Substatus))
status$School <- h
status$School.Code <- sub$High.School.Code[1]
bystat <- rbind(bystat, status)
}
colnames(bystat) <- c("Term", "Status", "Freq", "School", "Code")
head(bystat)
table(bystat$Status)
apps$Admission.Substatus <- gsub("Defer-test|Defer-Complete|Defer-final transcript|Defer-College Transcript|Defer-Other", "Defer", apps$Admission.Substatus)
table(apps$Admission.Substatus)
apps$Admission.Substatus <- gsub("Cancel: Deposit|Cancel: App Started|Cancel: Application|Cancel: Admit|Cancel: Defer", "Cancel", apps$Admission.Substatus)
table(apps$Admission.Substatus)
apps$Admission.Substatus <- gsub("Paid|Waived", "Deposit", apps$Admission.Substatus)
table(apps$Admission.Substatus)
apps$Admission.Substatus <- gsub("Defer-test|Defer-Complete|Defer-final transcript|Defer-College Transcript|Defer-Other|Defer-7th semester transcript|Defer-7th semester transcript/test", "Defer", apps$Admission.Substatus)
table(apps$Admission.Substatus)
apps$Admission.Substatus <- gsub("Application Incomplete", "App Started", apps$Admission.Substatus)
table(apps$Admission.Substatus)
apps$Admission.Substatus <- gsub("Admitted|Application Complete", "Application", apps$Admission.Substatus)
table(apps$Admission.Substatus)
View(apps)
apps <- read.csv("/Users/kwalker/Downloads/applist.csv", stringsAsFactors=FALSE)
apps$Admission.Substatus <- gsub("Defer-test|Defer-Complete|Defer-final transcript|Defer-College Transcript|Defer-Other|Defer-7th semester transcript|Defer-7th semester transcript/test", "Defer", apps$Admission.Substatus)
apps$Admission.Substatus <- gsub("Cancel: Deposit|Cancel: App Started|Cancel: Application|Cancel: Admit|Cancel: Defer", "Cancel", apps$Admission.Substatus)
apps$Admission.Substatus <- gsub("Paid|Waived", "Deposit", apps$Admission.Substatus)
apps$Admission.Substatus <- gsub("Admitted|Application Complete|Application Incomplete", "Application", apps$Admission.Substatus)
View(apps)
table(apps$Admission.Substatus)
bystat <- data.frame()
for(h in unique(apps$High.School.Name)) {
sub <- apps[apps$High.School.Name==h, ]
status <- data.frame(table(sub$Active.Application.Record..Application.Term, sub$Admission.Substatus))
status$School <- h
status$School.Code <- sub$High.School.Code[1]
bystat <- rbind(bystat, status)
}
colnames(bystat) <- c("Term", "Status", "Freq", "School", "Code")
head(bystat, 10)
apps <- read.csv("/Users/kwalker/Downloads/applist.csv", stringsAsFactors=FALSE)
apps$Admission.Substatus <- gsub("Defer-test|Defer-Complete|Defer-final transcript|Defer-College Transcript|Defer-Other|Defer-7th semester transcript|Defer-7th semester transcript/test", "Defer", apps$Admission.Substatus)
apps$Admission.Substatus <- gsub("Cancel: Deposit|Cancel: App Started|Cancel: Application|Cancel: Admit|Cancel: Defer|Admitted|Application Complete|Application Incomplete", "Cancel", apps$Admission.Substatus)
apps$Admission.Substatus <- gsub("Paid|Waived", "Deposit", apps$Admission.Substatus)
bystat <- data.frame()
for(h in unique(apps$High.School.Name)) {
sub <- apps[apps$High.School.Name==h, ]
status <- data.frame(table(sub$Active.Application.Record..Application.Term, sub$Admission.Substatus))
status$School <- h
status$School.Code <- sub$High.School.Code[1]
bystat <- rbind(bystat, status)
}
colnames(bystat) <- c("Term", "Status", "Freq", "School", "Code")
head(bystat)
bystat <- bystat[order(-bystat$Freq),]
head(bystat,10)
View(bystat)
totals <- aggregate(Freq ~ School + Code + Term, bystat, sum)
head(totals)
totals <- aggregate(Freq ~ School + Code, bystat, sum)
head(totals)
totals <- totals[order(-totals$Freq), ]
head(totals)
bystatplot <- bystat[bystat$Code %in% totals$Code[1:10], ]
View(bystatplot)
bystatplot <- bystatplot[bystatplot$Status!="Defer" & bystatplot$Status!="", ]
View(bystatplot)
head(bystatplot)
ggplot(bystatplot[bystatplot$Status=="Cancel", ], aes(School, Freq)) + geom_bar(stat="identity", position="dodge", aes(group=Term))
ggplot(bystatplot[bystatplot$Status=="Deposit", ], aes(School, Freq)) + geom_bar(stat="identity", position="dodge", aes(group=Term))
View(totals)
View(bystat)
final <- merge(totals, hs, by.x="Code", by.y="CEEB.Code", all.x=TRUE)
final <- merge(totals[1:200,], hs, by.x="Code", by.y="CEEB.Code", all.x=TRUE)
View(final)
summary(final)
table(final$High.School.Zip.Code)
table(final$State)
final <- final[,c(1:4,6,7,10,11,13)]
View(final)
table(final$High.School.Country)
final <- merge(totals[1:200,], hs, by.x="Code", by.y="CEEB.Code", all.x=TRUE)
final <- final[,c(1:4,6,7,10,11)]
write.csv(final, "Top_200_HS.csv", row.names=FALSE)
final <- merge(totals[1:200,], hs, by.x="Code", by.y="CEEB.Code", all.x=TRUE)
final <- final[,c(3,2,1,6,7,10,11)]
final <- merge(totals[1:200,], hs, by.x="Code", by.y="CEEB.Code", all.x=TRUE)
final <- final[,c(3,1,2,6,7,10,11)]
View(final)
write.csv(final, "Top_200_HS.csv", row.names=FALSE)
final <- final[order(-final$Freq), ]
write.csv(final, "Top_200_HS.csv", row.names=FALSE)
View(final)
car <- read.csv("career_orig.csv", stringsAsFactors=F)
car$EXP.GRAD.DATE <- factor(car$EXP.GRAD.DATE, levels=c("Dec 16, 2016", "May 7, 2017", "Aug 11, 2017", "Dec 15, 2017", "May 6, 2018", "Dec 14, 2018", "May 5, 2019", ""))
car$COHORT <- factor(car$COHORT, levels=c("Freshman", "Sophomore", "Junior", "Seniors", "Transfer", "Transfer Ignore"))
table(car$EXP.GRAD.DATE, car$COHORT)
ig <- car[car$COHORT=="Transer Ignore", ]
head(ig)
View(car)
tail(car)
car <- read.csv("career_orig.csv", stringsAsFactors=F)
car$EXP.GRAD.DATE <- factor(car$EXP.GRAD.DATE, levels=c("Dec 16, 2016", "May 7, 2017", "Aug 11, 2017", "Dec 15, 2017", "May 6, 2018", "Dec 14, 2018", "May 5, 2019", ""))
car$COHORT <- factor(car$COHORT, levels=c("Freshman", "Sophomore", "Junior", "Seniors", "Transfer", "Transfer ignore"))
table(car$EXP.GRAD.DATE, car$COHORT)
tail(car[,1:10])
for(g in seq_along(car$ID)){
if(car$COHORT[g]=="Transfer ignore") car$COHORT[g] <- car$CLASS[g]
}
table(car$EXP.GRAD.DATE, car$COHORT)
tail(car)
car <- read.csv("career_orig.csv", stringsAsFactors=F)
car$COHORT <- factor(car$COHORT, levels=c("Freshman", "Sophomore", "Junior", "Seniors", "Transfer", "Transfer ignore"))
for(g in seq_along(car$ID)){ if(car$COHORT[g]=="Transfer ignore") car$COHORT[g] <- car$CLASS[g] }
source('~/.active-rstudio-document', echo=TRUE)
head(challengeonly)
table(who3$Solicitation)
table(who3$Solicitation, who3$Group)
table(who3$Solicitation, who3$Gift_Description)
table(who3$Solicitation, who3$Group)
kable(who3$Solicitation, who3$Group)
solicGroup <- data.frame(table(who3$Solicitation, who3$Group))
solicGroup
colnames(solicGroup) <- c("Solicitation", "Group", "Number")
ggplot(solicGroup, aes(Solicitation, Number)) + geom_bar(stat="identity", aes(fill=Group) + theme_classic()
)
ggplot(solicGroup, aes(Solicitation, Number)) + geom_bar(stat="identity", aes(fill=Group)) + theme_classic()
ggplot(solicGroup, aes(Group, Number)) + geom_bar(stat="identity", aes(fill=Solicitation)) + theme_classic()
ggplot(solicGroup, aes(Group, Number)) + geom_bar(stat="identity", aes(fill=Solicitation)) + theme_classic() + labs(title="Solicitation by Group") + xlab("Communications Received by Donor") + ylab("") + scale_fill_brewer(palette="Paired")
kable(subsummary)
kable(cbind(subsummary[1:13,], subsummary[14:25]))
kable(cbind(subsummary[1:13,], subsummary[14:25,]))
subsummary <- rbind(subsummary, data.frame(Date="", Number="", Dollars=""))
subsummary <- rbind(subsummary, data.frame(Date=".", Number=".", Dollars="."))
data.frame(Date=".", Number=".", Dollars=".")
data.frame(Date="", Number="", Dollars="")
subsummary <- rbind(subsummary, empty)
empty <- data.frame(Date="", Number="", Dollars="")
subsummary <- rbind(subsummary, empty)
head(subsummary)
h <- ggplot(who3ag, aes(Var1, Freq)) + geom_bar(stat="identity", fill="cadetblue") + theme_classic() +
labs(title="Number of Nov. Donors who Received...") + xlab("") + geom_text(aes(label=Freq), vjust=-1) + ylim(c(0,360))
g <- ggplot(codes_plot, aes(Var1, Share)) + geom_bar(stat="identity", position="dodge", aes(fill=Type)) + theme_classic() + labs(title="Share of Donations by Donor Code\nAll Gifts vs. Nov. 10-12, 2015") + xlab("") + ylab("Share")
g
i <- ggplot(solicGroup, aes(Group, Number)) + geom_bar(stat="identity", aes(fill=Solicitation)) + theme_classic() + labs(title="Solicitation by Group") + xlab("Communications Received by Donor") + ylab("") + scale_fill_brewer(palette="Paired")
grid.arrange(h,i, ncol=2)
source('~/.active-rstudio-document', echo=TRUE)
smith <- read.csv("Smith_Filmography.csv", stringsAsFactors=FALSE)
smith <- smith[!smith$Title %in% c("Anchorman 2: The Legend Continues", "Winter's Tale") , ]
library(ggplot2)
# show that users like the movies more than critics, support metascore use
ratings <- smith[,c(2,11,12,14,15,17,18)]
ratings$imdbRating <- ratings$imdbRating*10
ratings$tomatoRating <- ratings$tomatoRating*10
ratings$tomatoUserRating <- ratings$tomatoUserRating*20
rate <- melt(ratings, id="Title")
rate$variable <- factor(rate$variable, levels=c("Metascore", "imdbRating", "tomatoMeter", "tomatoUserMeter", "tomatoRating", "tomatoUserRating"))
colnames(rate) <- c("Title", "Source", "Score")
ggplot(rate, aes(Source, Score)) + geom_boxplot(aes(fill=Source)) + theme_classic() + xlab("") + ylab("Score (out of 100)") + labs(title="Users Rate Will Smith Movies Higher Than Critics") + scale_fill_brewer(palette="Paired")
# metascore v. box office plot
ggplot(smith, aes(Metascore, BoxOfficeMojo)) + geom_point(aes(color=factor(Production)), size=3) + geom_text(aes(label=Title), vjust=-1) + theme_classic() + labs(title="Metascore vs. Box Office, Will Smith Movies")
modeling <- smith[, c(2,9,11)]
modeling <- modeling[complete.cases(modeling), ]
model <- kmeans(modeling[,2:3], 3, nstart = 20)
modeling$Cluster <- model$cluster
ggplot(modeling, aes(Metascore, BoxOfficeMojo)) + geom_point(aes(color=factor(Cluster)), size=3) + geom_text(aes(label=Title, color=factor(Cluster)), vjust=-1) + theme_classic() + scale_color_brewer(palette="Set1") + xlim(c(25,75))
setwd("/Users/kwalker/Desktop")
smith <- read.csv("Smith_Filmography.csv", stringsAsFactors=FALSE)
smith <- smith[!smith$Title %in% c("Anchorman 2: The Legend Continues", "Winter's Tale") , ]
library(ggplot2)
# show that users like the movies more than critics, support metascore use
ratings <- smith[,c(2,11,12,14,15,17,18)]
ratings$imdbRating <- ratings$imdbRating*10
ratings$tomatoRating <- ratings$tomatoRating*10
ratings$tomatoUserRating <- ratings$tomatoUserRating*20
rate <- melt(ratings, id="Title")
rate$variable <- factor(rate$variable, levels=c("Metascore", "imdbRating", "tomatoMeter", "tomatoUserMeter", "tomatoRating", "tomatoUserRating"))
colnames(rate) <- c("Title", "Source", "Score")
ggplot(rate, aes(Source, Score)) + geom_boxplot(aes(fill=Source)) + theme_classic() + xlab("") + ylab("Score (out of 100)") + labs(title="Users Rate Will Smith Movies Higher Than Critics") + scale_fill_brewer(palette="Paired")
# metascore v. box office plot
ggplot(smith, aes(Metascore, BoxOfficeMojo)) + geom_point(aes(color=factor(Production)), size=3) + geom_text(aes(label=Title), vjust=-1) + theme_classic() + labs(title="Metascore vs. Box Office, Will Smith Movies")
modeling <- smith[, c(2,9,11)]
modeling <- modeling[complete.cases(modeling), ]
model <- kmeans(modeling[,2:3], 3, nstart = 20)
modeling$Cluster <- model$cluster
ggplot(modeling, aes(Metascore, BoxOfficeMojo)) + geom_point(aes(color=factor(Cluster)), size=3) + geom_text(aes(label=Title, color=factor(Cluster)), vjust=-1) + theme_classic() + scale_color_brewer(palette="Set1") + xlim(c(25,75))
movieURL <- "http://www.imdb.com/name/nm0000243/"
movieHTML <- htmlTreeParse(getURL(movieURL, followlocation=TRUE), useInternal=TRUE)
movieLinks <- data.frame(Title=xpathSApply(movieHTML, "//div[@class='filmo-category-section']//b//a", xmlValue),
Link=xpathSApply(movieHTML, "//div[@class='filmo-category-section']//b//a", xmlGetAttr, "href"))
movieLinks$Link <- substr(movieLinks$Link, 8, 16)
movieURL <- "http://www.imdb.com/name/nm0000243/"
library(RCurl)
library(XML)
movieHTML <- htmlTreeParse(getURL(movieURL, followlocation=TRUE), useInternal=TRUE)
movieLinks <- data.frame(Title=xpathSApply(movieHTML, "//div[@class='filmo-category-section']//b//a", xmlValue),
Link=xpathSApply(movieHTML, "//div[@class='filmo-category-section']//b//a", xmlGetAttr, "href"))
movieLinks$Link <- substr(movieLinks$Link, 8, 16)
View(movieLinks)
movieLinks <- movieLinks[1:55, ] #38
# get imdb info
smith <- data.frame()
for(link in movieLinks$Link) {
URL <- paste("http://www.omdbapi.com/?i=", link, "&plot=short&tomatoes=true&r=xml", sep="")
result <- xmlTreeParse(getURL(URL), useInternal=TRUE)
row <- data.frame(imdbID=xpathSApply(result, "//movie", xmlGetAttr, "imdbID"),
Title=xpathSApply(result, "//movie", xmlGetAttr, "title"),
Type=xpathSApply(result, "//movie", xmlGetAttr, "type"),
Year=xpathSApply(result, "//movie", xmlGetAttr, "year"),
Rated=xpathSApply(result, "//movie", xmlGetAttr, "rated"),
Genre=xpathSApply(result, "//movie", xmlGetAttr, "genre"),
Director=xpathSApply(result, "//movie", xmlGetAttr, "director"),
BoxOffice=xpathSApply(result, "//movie", xmlGetAttr, "BoxOffice"),
Production=xpathSApply(result, "//movie", xmlGetAttr, "Production"),
Metascore=xpathSApply(result, "//movie", xmlGetAttr, "metascore"),
imdbRating=xpathSApply(result, "//movie", xmlGetAttr, "imdbRating"),
imdbVotes=xpathSApply(result, "//movie", xmlGetAttr, "imdbVotes"),
tomatoMeter=xpathSApply(result, "//movie", xmlGetAttr, "tomatoMeter"),
tomatoRating=xpathSApply(result, "//movie", xmlGetAttr, "tomatoRating"),
tomatoReviews=xpathSApply(result, "//movie", xmlGetAttr, "tomatoReviews"),
tomatoUserMeter=xpathSApply(result, "//movie", xmlGetAttr, "tomatoUserMeter"),
tomatoUserRating=xpathSApply(result, "//movie", xmlGetAttr, "tomatoUserRating"),
tomatoUserReviews=xpathSApply(result, "//movie", xmlGetAttr, "tomatoUserReviews"))
smith <- rbind(smith, row)
}
View(smith)
result
smith <- data.frame()
for(link in movieLinks$Link) {
URL <- paste("http://www.omdbapi.com/?i=", link, "&plot=short&tomatoes=true&r=xml", sep="")
result <- xmlTreeParse(getURL(URL), useInternal=TRUE)
row <- data.frame(imdbID=xpathSApply(result, "//movie", xmlGetAttr, "imdbID"),
Title=xpathSApply(result, "//movie", xmlGetAttr, "title"),
Type=xpathSApply(result, "//movie", xmlGetAttr, "type"),
Year=xpathSApply(result, "//movie", xmlGetAttr, "year"),
Rated=xpathSApply(result, "//movie", xmlGetAttr, "rated"),
Genre=xpathSApply(result, "//movie", xmlGetAttr, "genre"),
Director=xpathSApply(result, "//movie", xmlGetAttr, "director"),
Actors=xpathSApply(result, "//movie", xmlGetAttr, "actors"),
BoxOffice=xpathSApply(result, "//movie", xmlGetAttr, "BoxOffice"),
Production=xpathSApply(result, "//movie", xmlGetAttr, "Production"),
Metascore=xpathSApply(result, "//movie", xmlGetAttr, "metascore"),
imdbRating=xpathSApply(result, "//movie", xmlGetAttr, "imdbRating"),
imdbVotes=xpathSApply(result, "//movie", xmlGetAttr, "imdbVotes"),
tomatoMeter=xpathSApply(result, "//movie", xmlGetAttr, "tomatoMeter"),
tomatoRating=xpathSApply(result, "//movie", xmlGetAttr, "tomatoRating"),
tomatoReviews=xpathSApply(result, "//movie", xmlGetAttr, "tomatoReviews"),
tomatoUserMeter=xpathSApply(result, "//movie", xmlGetAttr, "tomatoUserMeter"),
tomatoUserRating=xpathSApply(result, "//movie", xmlGetAttr, "tomatoUserRating"),
tomatoUserReviews=xpathSApply(result, "//movie", xmlGetAttr, "tomatoUserReviews"))
smith <- rbind(smith, row)
}
View(smith)
smith <- smith["Denzel Washington" %in% smith$actors, ]
smith <- data.frame()
for(link in movieLinks$Link) {
URL <- paste("http://www.omdbapi.com/?i=", link, "&plot=short&tomatoes=true&r=xml", sep="")
result <- xmlTreeParse(getURL(URL), useInternal=TRUE)
row <- data.frame(imdbID=xpathSApply(result, "//movie", xmlGetAttr, "imdbID"),
Title=xpathSApply(result, "//movie", xmlGetAttr, "title"),
Type=xpathSApply(result, "//movie", xmlGetAttr, "type"),
Year=xpathSApply(result, "//movie", xmlGetAttr, "year"),
Rated=xpathSApply(result, "//movie", xmlGetAttr, "rated"),
Genre=xpathSApply(result, "//movie", xmlGetAttr, "genre"),
Director=xpathSApply(result, "//movie", xmlGetAttr, "director"),
Actors=xpathSApply(result, "//movie", xmlGetAttr, "actors"),
BoxOffice=xpathSApply(result, "//movie", xmlGetAttr, "BoxOffice"),
Production=xpathSApply(result, "//movie", xmlGetAttr, "Production"),
Metascore=xpathSApply(result, "//movie", xmlGetAttr, "metascore"),
imdbRating=xpathSApply(result, "//movie", xmlGetAttr, "imdbRating"),
imdbVotes=xpathSApply(result, "//movie", xmlGetAttr, "imdbVotes"),
tomatoMeter=xpathSApply(result, "//movie", xmlGetAttr, "tomatoMeter"),
tomatoRating=xpathSApply(result, "//movie", xmlGetAttr, "tomatoRating"),
tomatoReviews=xpathSApply(result, "//movie", xmlGetAttr, "tomatoReviews"),
tomatoUserMeter=xpathSApply(result, "//movie", xmlGetAttr, "tomatoUserMeter"),
tomatoUserRating=xpathSApply(result, "//movie", xmlGetAttr, "tomatoUserRating"),
tomatoUserReviews=xpathSApply(result, "//movie", xmlGetAttr, "tomatoUserReviews"))
smith <- rbind(smith, row)
}
smith <- smith[grepl("Denzel Washington", smith$actors), ]
smith <- data.frame()
for(link in movieLinks$Link) {
URL <- paste("http://www.omdbapi.com/?i=", link, "&plot=short&tomatoes=true&r=xml", sep="")
result <- xmlTreeParse(getURL(URL), useInternal=TRUE)
row <- data.frame(imdbID=xpathSApply(result, "//movie", xmlGetAttr, "imdbID"),
Title=xpathSApply(result, "//movie", xmlGetAttr, "title"),
Type=xpathSApply(result, "//movie", xmlGetAttr, "type"),
Year=xpathSApply(result, "//movie", xmlGetAttr, "year"),
Rated=xpathSApply(result, "//movie", xmlGetAttr, "rated"),
Genre=xpathSApply(result, "//movie", xmlGetAttr, "genre"),
Director=xpathSApply(result, "//movie", xmlGetAttr, "director"),
Actors=xpathSApply(result, "//movie", xmlGetAttr, "actors"),
BoxOffice=xpathSApply(result, "//movie", xmlGetAttr, "BoxOffice"),
Production=xpathSApply(result, "//movie", xmlGetAttr, "Production"),
Metascore=xpathSApply(result, "//movie", xmlGetAttr, "metascore"),
imdbRating=xpathSApply(result, "//movie", xmlGetAttr, "imdbRating"),
imdbVotes=xpathSApply(result, "//movie", xmlGetAttr, "imdbVotes"),
tomatoMeter=xpathSApply(result, "//movie", xmlGetAttr, "tomatoMeter"),
tomatoRating=xpathSApply(result, "//movie", xmlGetAttr, "tomatoRating"),
tomatoReviews=xpathSApply(result, "//movie", xmlGetAttr, "tomatoReviews"),
tomatoUserMeter=xpathSApply(result, "//movie", xmlGetAttr, "tomatoUserMeter"),
tomatoUserRating=xpathSApply(result, "//movie", xmlGetAttr, "tomatoUserRating"),
tomatoUserReviews=xpathSApply(result, "//movie", xmlGetAttr, "tomatoUserReviews"))
smith <- rbind(smith, row)
}
head(smith)
grepl("Denzel Washington", smith$actors)
grepl("Denzel Washington", smith$Actors)
smith <- smith[grepl("Denzel Washington", smith$Actors), ]
View(smith)
smith$BoxOffice <- gsub("\\$|M", "", as.character(smith$BoxOffice))
for(u in c(4,8,10:18)) smith[,u] <- as.numeric(as.character(smith[,u]))
View(smith)
smith <- data.frame()
for(link in movieLinks$Link) {
URL <- paste("http://www.omdbapi.com/?i=", link, "&plot=short&tomatoes=true&r=xml", sep="")
result <- xmlTreeParse(getURL(URL), useInternal=TRUE)
row <- data.frame(imdbID=xpathSApply(result, "//movie", xmlGetAttr, "imdbID"),
Title=xpathSApply(result, "//movie", xmlGetAttr, "title"),
Type=xpathSApply(result, "//movie", xmlGetAttr, "type"),
Year=xpathSApply(result, "//movie", xmlGetAttr, "year"),
Rated=xpathSApply(result, "//movie", xmlGetAttr, "rated"),
Genre=xpathSApply(result, "//movie", xmlGetAttr, "genre"),
Director=xpathSApply(result, "//movie", xmlGetAttr, "director"),
Actors=xpathSApply(result, "//movie", xmlGetAttr, "actors"),
BoxOffice=xpathSApply(result, "//movie", xmlGetAttr, "BoxOffice"),
Production=xpathSApply(result, "//movie", xmlGetAttr, "Production"),
Metascore=xpathSApply(result, "//movie", xmlGetAttr, "metascore"),
imdbRating=xpathSApply(result, "//movie", xmlGetAttr, "imdbRating"),
imdbVotes=xpathSApply(result, "//movie", xmlGetAttr, "imdbVotes"),
tomatoMeter=xpathSApply(result, "//movie", xmlGetAttr, "tomatoMeter"),
tomatoRating=xpathSApply(result, "//movie", xmlGetAttr, "tomatoRating"),
tomatoReviews=xpathSApply(result, "//movie", xmlGetAttr, "tomatoReviews"),
tomatoUserMeter=xpathSApply(result, "//movie", xmlGetAttr, "tomatoUserMeter"),
tomatoUserRating=xpathSApply(result, "//movie", xmlGetAttr, "tomatoUserRating"),
tomatoUserReviews=xpathSApply(result, "//movie", xmlGetAttr, "tomatoUserReviews"))
smith <- rbind(smith, row)
}
# keep only top billings
smith <- smith[grepl("Denzel Washington", smith$Actors), ]
smith$BoxOffice <- gsub("\\$|M", "", as.character(smith$BoxOffice))
smith <- smith[smith$Type=="movie" & smith$Year < 2017, ]
for(u in c(4,9,11:19)) smith[,u] <- as.numeric(as.character(smith[,u]))
smith <- smith[smith$Type=="movie" & smith$Year < 2017, ]
write.csv(smith, "Washington_Filmography.csv", row.names=FALSE)
# get imdb info
smith <- data.frame()
for(link in movieLinks$Link) {
URL <- paste("http://www.omdbapi.com/?i=", link, "&plot=short&tomatoes=true&r=xml", sep="")
result <- xmlTreeParse(getURL(URL), useInternal=TRUE)
row <- data.frame(imdbID=xpathSApply(result, "//movie", xmlGetAttr, "imdbID"),
Title=xpathSApply(result, "//movie", xmlGetAttr, "title"),
Type=xpathSApply(result, "//movie", xmlGetAttr, "type"),
Year=xpathSApply(result, "//movie", xmlGetAttr, "year"),
Rated=xpathSApply(result, "//movie", xmlGetAttr, "rated"),
Genre=xpathSApply(result, "//movie", xmlGetAttr, "genre"),
Director=xpathSApply(result, "//movie", xmlGetAttr, "director"),
Actors=xpathSApply(result, "//movie", xmlGetAttr, "actors"),
BoxOffice=xpathSApply(result, "//movie", xmlGetAttr, "BoxOffice"),
Production=xpathSApply(result, "//movie", xmlGetAttr, "Production"),
Metascore=xpathSApply(result, "//movie", xmlGetAttr, "metascore"),
imdbRating=xpathSApply(result, "//movie", xmlGetAttr, "imdbRating"),
imdbVotes=xpathSApply(result, "//movie", xmlGetAttr, "imdbVotes"),
tomatoMeter=xpathSApply(result, "//movie", xmlGetAttr, "tomatoMeter"),
tomatoRating=xpathSApply(result, "//movie", xmlGetAttr, "tomatoRating"),
tomatoReviews=xpathSApply(result, "//movie", xmlGetAttr, "tomatoReviews"),
tomatoUserMeter=xpathSApply(result, "//movie", xmlGetAttr, "tomatoUserMeter"),
tomatoUserRating=xpathSApply(result, "//movie", xmlGetAttr, "tomatoUserRating"),
tomatoUserReviews=xpathSApply(result, "//movie", xmlGetAttr, "tomatoUserReviews"))
smith <- rbind(smith, row)
}
# keep only top billings
smith <- smith[grepl("Denzel Washington", smith$Actors), ]
smith$BoxOffice <- gsub("\\$|M", "", as.character(smith$BoxOffice))
for(u in c(4,9,11:19)) smith[,u] <- as.numeric(as.character(smith[,u]))
smith[smith$Type=="movie" & smith$Year < 2017, ]
smith <- smith[smith$Type=="movie" & smith$Year < 2017, ]
write.csv(smith, "Washington_Filmography.csv", row.names=FALSE)
smith <- read.csv("Washington_Filmography.csv", stringsAsFactors=FALSE)
library(ggplot2)
smith <- smith[,-8]
ratings <- smith[,c(2,11,12,14,15,17,18)]
ratings$imdbRating <- ratings$imdbRating*10
ratings$tomatoRating <- ratings$tomatoRating*10
ratings$tomatoUserRating <- ratings$tomatoUserRating*20
rate <- melt(ratings, id="Title")
library(reshape2)
rate <- melt(ratings, id="Title")
rate$variable <- factor(rate$variable, levels=c("Metascore", "imdbRating", "tomatoMeter", "tomatoUserMeter", "tomatoRating", "tomatoUserRating"))
colnames(rate) <- c("Title", "Source", "Score")
ggplot(rate, aes(Source, Score)) + geom_boxplot(aes(fill=Source)) + theme_classic() + xlab("") + ylab("Score (out of 100)") + labs(title="Users Rate Will Smith Movies Higher Than Critics") + scale_fill_brewer(palette="Paired")
ggplot(smith, aes(Metascore, BoxOfficeMojo)) + geom_point(aes(color=factor(Production)), size=3) + geom_text(aes(label=Title), vjust=-1) + theme_classic() + labs(title="Metascore vs. Box Office, Will Smith Movies")
ggplot(smith, aes(Metascore, BoxOfficeMojo)) + geom_point(aes(color=factor(Rated)), size=3) + geom_text(aes(label=Title), vjust=-1) + theme_classic() + labs(title="Metascore vs. Box Office, Will Smith Movies")
modeling <- smith[, c(2,9,11)]
modeling <- modeling[complete.cases(modeling), ]
model <- kmeans(modeling[,2:3], 3, nstart = 20)
modeling$Cluster <- model$cluster
ggplot(modeling, aes(Metascore, BoxOfficeMojo)) + geom_point(aes(color=factor(Cluster)), size=3) + geom_text(aes(label=Title, color=factor(Cluster)), vjust=-1) + theme_classic() + scale_color_brewer(palette="Set1") + xlim(c(25,75))
ggplot(modeling, aes(Metascore, BoxOfficeMojo)) + geom_point(aes(color=factor(Cluster)), size=3) + geom_text(aes(label=Title, color=factor(Cluster)), vjust=-1) + theme_classic() + scale_color_brewer(palette="Set1")
setwd("/Users/kwalker/git_projects/fan_favorite_actors")
movies <- read.csv("movieInfo.csv", stringsAsFactors=FALSE)
# make numeric
for(h in c(5,10:17)) movies[,h] <- as.numeric(movies[,h])
# keep only movies
movies <- movies[movies$Type=="movie", ]
# keep only movies where the actor is first or second billed
keeps <- NULL
for(x in seq_along(movies$ID)){
first <- strsplit(movies$Actors[x], ", ")[[1]][1]
second <- strsplit(movies$Actors[x], ", ")[[1]][2]
third <- strsplit(movies$Actors[x], ", ")[[1]][3]
fourth <- strsplit(movies$Actors[x], ", ")[[1]][4]
if(movies$Actor[x] %in% c(first, second, third, fourth)) {
keeps <- c(keeps, x)
}
}
movies2 <- movies[keeps, ]
# keep only movies with 1000+ user reviews
movies2 <- movies2[movies2$tomatoUserReviews > 1000 & movies2$Year < 2017, ]
movies2 <- movies2[!is.na(movies2$ID), ]
# keep rows with both values
movies2 <- movies2[!is.na(movies2$tomatoMeter) & !is.na(movies2$tomatoUserMeter), ]
# keep actors with at least 10 movies
threshold <- data.frame(table(movies2$Actor))
threshold <- threshold[threshold$Freq > 10, ]
movies2 <- movies2[movies2$Actor %in% threshold$Var1, ]
# get difference between user and critic score for each movie
movies2$Difference <- movies2$tomatoUserMeter - movies2$tomatoMeter
######## GET TA PLOTTIN
library(ggplot2)
library(ggrepel)
library(gridExtra)
scoreMedians <- NULL
for(h in unique(movies2$Actor)){
subset <- movies2[movies2$Actor==h, ]
row <- data.frame(Actor=h, Number=nrow(subset),
CriticMedian=median(subset$tomatoMeter),
UserMedian=median(subset$tomatoUserMeter),
UserMinusCritic=(median(subset$tomatoUserMeter)-median(subset$tomatoMeter)),
DifferenceMean=round(mean(subset$Difference),2),
DifferenceMedian=median(subset$Difference)
)
scoreMedians <- rbind(scoreMedians, row)
}
scoreMedians$CalculatedCritic <- scoreMedians$UserMedian - scoreMedians$DifferenceMedian
View(scoreMedians)
View(movies2[movies2$Actor=="David Spade", ])
View(movies2[movies2$Actor=="David Spade", c(4,5,6,8,9,13,15,20)])
View(movies2[movies2$Actor=="Adam Sandler", c(4,5,6,8,9,13,15,20)])
x <- movies2[movies2$Actor=="Adam Sandler", c(4,5,6,8,9,13,15,20)]
x <- x[order(-x$Difference)]
x <- x[order(-x$Difference),]
View(x)
x <- movies2[movies2$Actor=="Gerard Butler", c(4,5,6,8,9,13,15,20)]
x <- x[order(-x$Difference),]
View(x)
x <- movies2[movies2$Actor=="Ryan Reynolds", c(4,5,6,8,9,13,15,20)]
x <- x[order(-x$Difference),]
View(x)
x <- movies2[movies2$Actor=="Kate Hudson", c(4,5,6,8,9,13,15,20)]
x <- x[order(-x$Difference),]
View(x)
View(scoreMedians)
scoreMedians <- scoreMedians[order(-scoreMedians$Difference),]
scoreMedians <- scoreMedians[order(-scoreMedians$DifferenceMedian),]
View(scoreMedians)
x <- movies2[movies2$Actor=="Hugo Weaving", c(4,5,6,8,9,13,15,20)]
x <- x[order(-x$Difference),]
x
View(x)
x <- movies2[movies2$Actor=="Hugo Weaving", c(4,5,6,9,13,15,20)]
x <- x[order(-x$Difference),]
View(x)
x <- movies2[movies2$Actor=="Seth Rogen", c(4,5,6,9,13,15,20)]
x <- x[order(-x$Difference),]
View(x)
x <- movies2[movies2$Actor=="Clint Eastwood", c(4,5,6,9,13,15,20)]
x <- x[order(-x$Difference),]
View(x)
x <- x[order(-x$tomatoMeter),]
View(x)
x <- x[order(-x$tomatoUserMeter),]
View(x)
x <- movies2[movies2$Actor=="Jack Nicholson", c(4,5,6,9,13,15,20)]
x <- x[order(-x$Difference),]
View(x)
x <- x[order(-x$tomatoUserMeter),]
View(x)
x <- x[order(-x$tomatoMeter),]
View(x)
x <- movies2[movies2$Actor=="Anna Kendrick", c(4,5,6,9,13,15,20)]
x <- x[order(-x$tomatoMeter),]
View(x)
x <- x[order(-x$tomatoUserMeter),]
View(x)
summary(x)
x <- movies2[movies2$Actor=="Jack Nicholson", c(4,5,6,9,13,15,20)]
summary(x)
x <- movies2[movies2$Actor=="Clint Eastwood", c(4,5,6,9,13,15,20)]
summary(x)
x <- movies2[movies2$Actor=="Seth Rogen", c(4,5,6,9,13,15,20)]
summary(x)
x <- movies2[movies2$Actor=="Hugo Weaving", c(4,5,6,9,13,15,20)]
summary(x)
x <- movies2[movies2$Actor=="Kate Hudson", c(4,5,6,9,13,15,20)]
summary(x)
x <- movies2[movies2$Actor=="Ryan Reynolds", c(4,5,6,9,13,15,20)]
summary(x)
x <- movies2[movies2$Actor=="Gerard Butler", c(4,5,6,9,13,15,20)]
summary(x)
x <- movies2[movies2$Actor=="Adam Sandler", c(4,5,6,9,13,15,20)]
summary(x)
x <- movies2[movies2$Actor=="David Spade", c(4,5,6,9,13,15,20)]
summary(x)
